// ‰π¶Á±çÊï∞ÊçÆ
const booksData = {
  outsider: {
    title: 'Â±ÄÂ§ñ‰∫∫',
    author: 'ÈòøÂ∞îË¥ù¬∑Âä†Áº™',
    cover: 'images/Â±ÄÂ§ñ‰∫∫.webp',
    description: '„ÄäÂ±ÄÂ§ñ‰∫∫„ÄãÊòØÊ≥ïÂõΩ‰ΩúÂÆ∂Âä†Áº™ÁöÑ‰ª£Ë°®‰ΩúÔºåËÆ≤Ëø∞‰∫Ü‰∏Ä‰∏™ÂØπ‰∏ÄÂàáÈÉΩÊº†ÁÑ∂Â§Ñ‰πãÁöÑÂ∞èËÅåÂëòÈªòÂ∞îÁ¥¢ÁöÑÊïÖ‰∫ã„ÄÇ‰ªñÂú®ÊØç‰∫≤Âéª‰∏ñÂêéË°®Áé∞ÂÜ∑Êº†ÔºåÂêéÊù•ÂèàÊó†ÊïÖÊùÄ‰∫∫ÔºåÊúÄÁªàË¢´Âà§Â§ÑÊ≠ªÂàë„ÄÇ',
    quote: '"Âú®Êàë‰ª¨ÁöÑÁ§æ‰ºöÈáåÔºå‰ªª‰Ωï‰∏çÂú®ÊØç‰∫≤Ëë¨Á§º‰∏äÂì≠Ê≥£ÁöÑ‰∫∫ÔºåÈÉΩÊúâÂèØËÉΩË¢´Âà§Ê≠ªÂàë„ÄÇ"'
  },
  alchemist: {
    title: 'ÁâßÁæäÂ∞ëÂπ¥Â•áÂπª‰πãÊóÖ',
    author: '‰øùÁΩó¬∑ÁßëÂüÉÁï•',
    cover: 'images/ÁâßÁæäÂ∞ëÂπ¥Â•áÂπª‰πãÊóÖ.webp',
    description: '‰∏Ä‰∏™ÂêçÂè´Âú£Âú∞‰∫öÂì•ÁöÑË•øÁè≠ÁâôÁâßÁæäÂ∞ëÂπ¥Ôºå‰∏∫‰∫ÜËøΩÂØªËá™Â∑±ÂèçÂ§çÂá∫Áé∞Âú®Ê¢¶‰∏≠ÁöÑÂÆùËóèÔºåË∏è‰∏ä‰∫ÜÂÖÖÊª°Â•áÈÅá‰∏éÂêØÁ§∫ÁöÑÊóÖÁ®ã„ÄÇÂú®ÊóÖÈÄî‰∏≠Ôºå‰ªñÈÅáÂà∞‰∫ÜÂêÑÁßç‰∫∫Áâ©ÔºåÂ≠¶‰ºö‰∫ÜÂÄæÂê¨ÂÜÖÂøÉÔºåÁêÜËß£‰∏ñÁïåÁöÑËØ≠Ë®Ä„ÄÇ',
    quote: '"ÂΩì‰Ω†ÁúüÂøÉÊ∏¥ÊúõÊüêÊ†∑‰∏úË•øÊó∂ÔºåÊï¥‰∏™ÂÆáÂÆôÈÉΩ‰ºöËÅîÂêàËµ∑Êù•Â∏ÆÂä©‰Ω†ÂÆåÊàê„ÄÇ"'
  }
};

// Â≠òÂÇ®Êï∞ÊçÆ
let bookData = {};
let currentBook = '';
let timerInterval = null;
let timerSeconds = 0;

// ‰∏ªÈ¢òÂàáÊç¢
const themeToggle = document.getElementById('themeToggle');
const body = document.body;

themeToggle.addEventListener('click', () => {
  body.classList.toggle('dark-mode');
  themeToggle.textContent = body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';
});

// ËßÜÂ∑ÆÊïàÊûú
const header = document.getElementById('header');
const logoHeader = document.querySelector('.logo-header');

window.addEventListener('scroll', () => {
  const scrolled = window.pageYOffset;
  const parallax = scrolled * 0.5;
  
  if (logoHeader) {
    logoHeader.style.transform = `translateY(${parallax}px)`;
  }
});

// ÂÄíËÆ°Êó∂ÂäüËÉΩ
const targetDate = new Date('2025-10-25T09:00:00').getTime();

function updateCountdown() {
  const now = new Date().getTime();
  const distance = targetDate - now;

  const days = Math.floor(distance / (1000 * 60 * 60 * 24));
  const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((distance % (1000 * 60)) / 1000);

  document.getElementById('days').textContent = days;
  document.getElementById('hours').textContent = hours;
  document.getElementById('minutes').textContent = minutes;
  document.getElementById('seconds').textContent = seconds;

  if (distance < 0) {
    document.getElementById('days').textContent = '0';
    document.getElementById('hours').textContent = '0';
    document.getElementById('minutes').textContent = '0';
    document.getElementById('seconds').textContent = '0';
  }
}

setInterval(updateCountdown, 1000);
updateCountdown();

// ‰π¶Á±çËØ¶ÊÉÖÂºπÂá∫Â±Ç
const bookItems = document.querySelectorAll('.book-item[data-book]');
const modal = document.getElementById('bookModal');
const modalClose = document.getElementById('modalClose');
const modalTitle = document.getElementById('modalTitle');
const modalAuthor = document.getElementById('modalAuthor');
const modalDescription = document.getElementById('modalDescription');
const modalQuote = document.getElementById('modalQuote');
const modalCoverImg = document.getElementById('modalCoverImg');

bookItems.forEach(item => {
  item.addEventListener('click', () => {
    const bookKey = item.getAttribute('data-book');
    const book = booksData[bookKey];
    
    if (book) {
      currentBook = bookKey;
      modalTitle.textContent = book.title;
      modalAuthor.textContent = `‰ΩúËÄÖÔºö${book.author}`;
      modalDescription.textContent = book.description;
      modalQuote.textContent = book.quote;
      modalQuote.style.fontStyle = 'italic';
      modalQuote.style.color = 'var(--accent-color)';
      modalCoverImg.src = book.cover;
      modal.classList.add('active');
      
      // Âä†ËΩΩ‰øùÂ≠òÁöÑÊï∞ÊçÆ
      loadBookData(bookKey);
    }
  });
});

modalClose.addEventListener('click', () => {
  modal.classList.remove('active');
  stopTimer();
});

modal.addEventListener('click', (e) => {
  if (e.target === modal) {
    modal.classList.remove('active');
    stopTimer();
  }
});

// ËØÑÂàÜÁ≥ªÁªü
const stars = document.querySelectorAll('.star');
const ratingDisplay = document.getElementById('ratingDisplay');

stars.forEach(star => {
  star.addEventListener('click', () => {
    const rating = parseInt(star.getAttribute('data-rating'));
    
    stars.forEach(s => s.classList.remove('active'));
    for (let i = 0; i < rating; i++) {
      stars[i].classList.add('active');
    }
    
    ratingDisplay.textContent = `‰Ω†ÁöÑËØÑÂàÜÔºö${rating} Êòü`;
    
    if (!bookData[currentBook]) bookData[currentBook] = {};
    bookData[currentBook].rating = rating;
    saveData();
  });
});

// ÈòÖËØªËøõÂ∫¶
const progressBtns = document.querySelectorAll('.progress-btn');

progressBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    progressBtns.forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    
    const progress = btn.getAttribute('data-progress');
    if (!bookData[currentBook]) bookData[currentBook] = {};
    bookData[currentBook].progress = progress;
    
    // Êõ¥Êñ∞‰π¶Á±çÂàóË°®‰∏≠ÁöÑÁä∂ÊÄÅÊ†áÁ≠æ
    const statusBadge = document.querySelector(`[data-status="${currentBook}"]`);
    if (statusBadge) {
      statusBadge.classList.remove('reading', 'finished');
      if (progress === 'reading') {
        statusBadge.textContent = 'Ê≠£Âú®ËØª';
        statusBadge.classList.add('reading');
      } else if (progress === 'finished') {
        statusBadge.textContent = 'Â∑≤ËØªÂÆå';
        statusBadge.classList.add('finished');
      } else {
        statusBadge.textContent = 'Êú™ËØª';
      }
    }
    
    saveData();
  });
});

// ÈòÖËØªËÆ°Êó∂Âô®
const startTimerBtn = document.getElementById('startTimer');
const stopTimerBtn = document.getElementById('stopTimer');
const resetTimerBtn = document.getElementById('resetTimer');
const readingTimeDisplay = document.getElementById('readingTime');

function formatTime(seconds) {
  const hrs = Math.floor(seconds / 3600);
  const mins = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  return `${String(hrs).padStart(2, '0')}:${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
}

function startTimer() {
  if (!timerInterval) {
    timerInterval = setInterval(() => {
      timerSeconds++;
      readingTimeDisplay.textContent = formatTime(timerSeconds);
      
      if (!bookData[currentBook]) bookData[currentBook] = {};
      bookData[currentBook].readingTime = timerSeconds;
      saveData();
    }, 1000);
  }
}

function stopTimer() {
  if (timerInterval) {
    clearInterval(timerInterval);
    timerInterval = null;
  }
}

function resetTimer() {
  stopTimer();
  timerSeconds = 0;
  readingTimeDisplay.textContent = formatTime(timerSeconds);
  
  if (bookData[currentBook]) {
    bookData[currentBook].readingTime = 0;
    saveData();
  }
}

startTimerBtn.addEventListener('click', startTimer);
stopTimerBtn.addEventListener('click', stopTimer);
resetTimerBtn.addEventListener('click', resetTimer);

// Á¨îËÆ∞‰øùÂ≠ò
const bookNotes = document.getElementById('bookNotes');
const saveNoteBtn = document.getElementById('saveNote');

saveNoteBtn.addEventListener('click', () => {
  const note = bookNotes.value;
  
  if (!bookData[currentBook]) bookData[currentBook] = {};
  bookData[currentBook].notes = note;
  saveData();
  
  alert('Á¨îËÆ∞Â∑≤‰øùÂ≠òÔºÅ');
});

// Êï∞ÊçÆÊåÅ‰πÖÂåñ
function saveData() {
  try {
    localStorage.setItem('cheeseBookData', JSON.stringify(bookData));
  } catch (e) {
    console.log('Êï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•');
  }
}

function loadData() {
  try {
    const data = localStorage.getItem('cheeseBookData');
    if (data) {
      bookData = JSON.parse(data);
    }
  } catch (e) {
    console.log('Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•');
  }
}

function loadBookData(bookKey) {
  if (!bookData[bookKey]) return;
  
  const data = bookData[bookKey];
  
  // Âä†ËΩΩËØÑÂàÜ
  if (data.rating) {
    stars.forEach(s => s.classList.remove('active'));
    for (let i = 0; i < data.rating; i++) {
      stars[i].classList.add('active');
    }
    ratingDisplay.textContent = `‰Ω†ÁöÑËØÑÂàÜÔºö${data.rating} Êòü`;
  } else {
    stars.forEach(s => s.classList.remove('active'));
    ratingDisplay.textContent = 'ËøòÊú™ËØÑÂàÜ';
  }
  
  // Âä†ËΩΩËøõÂ∫¶
  if (data.progress) {
    progressBtns.forEach(btn => {
      btn.classList.remove('active');
      if (btn.getAttribute('data-progress') === data.progress) {
        btn.classList.add('active');
      }
    });
  }
  
  // Âä†ËΩΩÈòÖËØªÊó∂Èïø
  if (data.readingTime) {
    timerSeconds = data.readingTime;
    readingTimeDisplay.textContent = formatTime(timerSeconds);
  } else {
    timerSeconds = 0;
    readingTimeDisplay.textContent = formatTime(0);
  }
  
  // Âä†ËΩΩÁ¨îËÆ∞
  if (data.notes) {
    bookNotes.value = data.notes;
  } else {
    bookNotes.value = '';
  }
}

// ÊêúÁ¥¢ÂäüËÉΩ
const searchInput = document.getElementById('searchInput');
const bookList = document.getElementById('bookList');

searchInput.addEventListener('input', (e) => {
  const searchTerm = e.target.value.toLowerCase();
  const allBooks = bookList.querySelectorAll('.book-item');
  
  allBooks.forEach(book => {
    const title = book.querySelector('.book-title').textContent.toLowerCase();
    if (title.includes(searchTerm)) {
      book.style.display = 'block';
      book.style.animation = 'fadeIn 0.5s ease';
    } else {
      book.style.display = 'none';
    }
  });
});

// ÊâìÂç°Êó•ÂéÜ
let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();
let checkedDates = new Set();

function renderCalendar() {
  const calendarGrid = document.getElementById('calendarGrid');
  const calendarMonth = document.getElementById('calendarMonth');
  const checkedDaysDisplay = document.getElementById('checkedDays');
  
  calendarGrid.innerHTML = '';
  
  const firstDay = new Date(currentYear, currentMonth, 1).getDay();
  const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
  
  const monthNames = ['‰∏ÄÊúà', '‰∫åÊúà', '‰∏âÊúà', 'ÂõõÊúà', '‰∫îÊúà', 'ÂÖ≠Êúà', 
                      '‰∏ÉÊúà', 'ÂÖ´Êúà', '‰πùÊúà', 'ÂçÅÊúà', 'ÂçÅ‰∏ÄÊúà', 'ÂçÅ‰∫åÊúà'];
  calendarMonth.textContent = `${currentYear}Âπ¥ ${monthNames[currentMonth]}`;
  
  // Ê∑ªÂä†Á©∫ÁôΩÂ§©Êï∞
  for (let i = 0; i < firstDay; i++) {
    const emptyDay = document.createElement('div');
    calendarGrid.appendChild(emptyDay);
  }
  
  // Ê∑ªÂä†Êó•Êúü
  let checkedCount = 0;
  const today = new Date();
  
  for (let day = 1; day <= daysInMonth; day++) {
    const dayElement = document.createElement('div');
    dayElement.classList.add('calendar-day');
    dayElement.textContent = day;
    
    const dateKey = `${currentYear}-${currentMonth}-${day}`;
    
    // Ê£ÄÊü•ÊòØÂê¶ÊòØ‰ªäÂ§©
    if (today.getFullYear() === currentYear && 
        today.getMonth() === currentMonth && 
        today.getDate() === day) {
      dayElement.classList.add('today');
    }
    
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÊâìÂç°
    if (checkedDates.has(dateKey)) {
      dayElement.classList.add('checked');
      checkedCount++;
    }
    
    dayElement.addEventListener('click', () => {
      if (checkedDates.has(dateKey)) {
        checkedDates.delete(dateKey);
        dayElement.classList.remove('checked');
      } else {
        checkedDates.add(dateKey);
        dayElement.classList.add('checked');
      }
      saveCalendarData();
      renderCalendar();
    });
    
    calendarGrid.appendChild(dayElement);
  }
  
  checkedDaysDisplay.textContent = checkedCount;
}

document.getElementById('prevMonth').addEventListener('click', () => {
  currentMonth--;
  if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  renderCalendar();
});

document.getElementById('nextMonth').addEventListener('click', () => {
  currentMonth++;
  if (currentMonth > 11) {
    currentMonth = 0;
    currentYear++;
  }
  renderCalendar();
});

function saveCalendarData() {
  try {
    localStorage.setItem('cheeseCalendarData', JSON.stringify(Array.from(checkedDates)));
  } catch (e) {
    console.log('Êó•ÂéÜÊï∞ÊçÆ‰øùÂ≠òÂ§±Ë¥•');
  }
}

function loadCalendarData() {
  try {
    const data = localStorage.getItem('cheeseCalendarData');
    if (data) {
      checkedDates = new Set(JSON.parse(data));
    }
  } catch (e) {
    console.log('Êó•ÂéÜÊï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•');
  }
}

// ÂàùÂßãÂåñÔºàÈ°µÈù¢Âä†ËΩΩÊó∂ÊâßË°åÔºâ
loadData();
loadCalendarData();
renderCalendar();
